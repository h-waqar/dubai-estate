generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LOCAL_URL")
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDITOR
  WRITER
  MANAGER
  SUPPORT
  USER
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

// --- Users & Auth ---
model User {
  id                 Int          @id @default(autoincrement())
  name               String?
  email              String       @unique
  image              String?
  password           String? // For credentials login (optional if only OAuth)
  role               Role         @default(USER)
  profile            Profile?
  admin              Admin?
  posts              Post[]
  properties         Property[]
  pricingPlanId      Int?
  approvedProperties Property[]   @relation("PropertyApprovals")
  pricingPlan        PricingPlan? @relation(fields: [pricingPlanId], references: [id], onDelete: SetNull)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Media              Media[]
}

// --- Categories ---
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String? // Hex color for UI (#FF5733)
  icon        String? // Icon name or emoji
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
}

// --- Posts ---
model Post {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  excerpt      String?
  content      String // markdown/html
  // coverImage String?
  coverImageId Int?
  coverImage   Media?   @relation(fields: [coverImageId], references: [id], onDelete: SetNull)
  tags         String[] @default([])
  published    Boolean  @default(false)

  // Relations
  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([published])
  @@index([createdAt])
}

// This module is "lead"
model CallbackRequest {
  id              Int           @id @default(autoincrement())
  fullName        String
  phone           String
  
  email           String
  preferredTime   String?
  contactMethod   ContactMethod
  purchasePurpose String?
  budget          Int?
  location        String?
  message         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// --- Enums ---
enum ContactMethod {
  Phone
  Email
}

enum PropertyStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  DECLINED
  ARCHIVED
}

enum PropertyAvailability {
  AVAILABLE
  SOLD
  RENTED
  OFFPLAN
}

enum FurnishingStatus {
  FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

// --- Pricing Plan & Quotas ---
model PricingPlan {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  slug         String   @unique
  description  String?
  maxListings  Int      @default(3) // e.g., 3, 5, 10
  priceMonthly Decimal  @db.Decimal(10, 2)
  priceYearly  Decimal  @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// --- Properties ---
model Property {
  id             Int          @id @default(autoincrement())
  title          String
  slug           String       @unique
  description    String?
  price          Decimal      @db.Decimal(12, 2)
  currency       String       @default("AED")
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId Int

  // Media
  mediaUsages MediaUsage[] // direct backref, optional helper for queries

  bedrooms     Int?
  bathrooms    Int?
  builtUpArea  Float?
  areaUnit     String?              @default("sqft")
  refNo        String?              @unique
  location     String
  address      String?
  latitude     Float?
  longitude    Float?
  furnishing   FurnishingStatus     @default(UNFURNISHED)
  availability PropertyAvailability @default(AVAILABLE)
  status       PropertyStatus       @default(DRAFT)
  features     String[]             @default([])
  images       PropertyImage[]
  videos       PropertyVideo[]

  // Owner (Agent / User)
  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Moderation & Lifecycle
  published      Boolean   @default(false)
  approvedById   Int?
  approvedBy     User?     @relation("PropertyApprovals", fields: [approvedById], references: [id])
  publishedAt    DateTime?
  declinedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([price])
  @@index([propertyTypeId])
  @@index([status])
  @@index([availability])
  @@index([createdById])
}

// --- Property Type ---
model PropertyType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  properties  Property[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// --- Property Image ---
model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  alt        String?
  isPrimary  Boolean  @default(false)
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

// --- Property Video ---
model PropertyVideo {
  id         Int      @id @default(autoincrement())
  url        String
  provider   String? // e.g. YouTube, Vimeo
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

// --- Media ---
model Media {
  id           Int       @id @default(autoincrement())
  url          String
  type         MediaType @default(IMAGE)
  alt          String?
  title        String?
  mimeType     String?
  size         Int? // in bytes
  uploadedById Int?
  uploadedBy   User?     @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  usages MediaUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]

  @@index([type])
  @@index([uploadedById])
}

// --- Media Usage ---
model MediaUsage {
  id      Int   @id @default(autoincrement())
  mediaId Int
  media   Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  entityId   Int
  entityType String // e.g. "POST", "PROPERTY", "CATEGORY", "PROFILE"
  role       String? // optional: "COVER", "THUMBNAIL", "GALLERY"

  createdAt  DateTime  @default(now())
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?

  @@index([entityType, entityId])
}
